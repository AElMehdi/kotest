//package io.kotest.property.arbitrary
//
//import io.kotest.property.Argument
//import kotlin.random.Random
//
///**
// * Create a new [Argument] by keeping only instances of U generated by this gen.
// * This is useful if you have a type hierarchy and only want to retain
// * a particular subtype.
// */
//@Suppress("UNCHECKED_CAST")
//inline fun <T, reified U : T> Argument<T>.filterIsInstance(): Argument<U> = object : Argument<U> {
//   override fun generate(random: Random): Sequence<PropertyInput<U>> =
//      this@filterIsInstance.generate(random).filter { it.value is U }.map { it as PropertyInput<U> }
//}
//
///**
// * Returns a new [Argument] that always includes null in the generated values.
// */
//fun <T> Argument<T>.orNull(): Argument<T?> = object : Argument<T?> {
//   override fun generate(random: Random): Sequence<PropertyInput<T?>> =
//      sequenceOf(PropertyInput.invoke(null)) + this@orNull.generate(random)
//}
